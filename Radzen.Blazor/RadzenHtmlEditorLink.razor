@using System.Text
@using Radzen.Blazor.Rendering
@using Microsoft.JSInterop
@inherits RadzenHtmlEditorButtonBase
@inject DialogService DialogService

<EditorButton Title=@Title Click=@OnClick Icon="insert_link" />

@code {
    protected override async Task OnClick()
    {
        // Remove resize handles if an image is selected
        await JsRuntime.InvokeVoidAsync("Radzen.removeImageResizeHandlesForLink", Editor.Element);
        
        await Editor.SaveSelectionAsync();

        bool blank = false;

        // Check if we have an image selected using JavaScript
        var isImageSelected = await JsRuntime.InvokeAsync<bool>("Radzen.hasSelectedImage", Editor.Element);
        
        var attributes = await Editor.GetSelectionAttributes<LinkAttributes>("a", ["innerText", "href", "target", "innerHTML"]);

        if (attributes.Target == "_blank")
        {
            blank = true;
        }

        var result = await DialogService.OpenAsync(Title, ds => @<div class="rz-html-editor-dialog">
            <RadzenTemplateForm TItem="LinkAttributes" Data="@attributes" Submit="() => ds.Close(true)">
                <div class="rz-html-editor-dialog-item">
                    <label>@UrlText</label>
                    <RadzenTextBox @bind-Value=@attributes.Href style="width: 100%" />
                </div>
                @if (string.IsNullOrWhiteSpace(attributes.InnerHtml) || attributes.InnerHtml == "<br>")
                {
                <div class="rz-html-editor-dialog-item">
                    <label>@LinkText</label>
                    <RadzenTextBox @bind-Value=@attributes.InnerText style="width: 100%" />
                </div>
                }
                <div class="rz-html-editor-dialog-item">
                    <RadzenCheckBox @bind-Value=@blank />
                    <label>@OpenInNewWindowText</label>
                </div>
                <div class="rz-html-editor-dialog-buttons">
                    <RadzenButton Text=@OkText ButtonType="ButtonType.Submit" />
                    <RadzenButton Text=@CancelText Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
                </div>
            </RadzenTemplateForm>
        </div>);

        await Editor.RestoreSelectionAsync();

        if (result == true && !string.IsNullOrEmpty(attributes.Href))
        {
            if (isImageSelected)
            {
                // Use JS interop to wrap the <img> in a link
                await JsRuntime.InvokeVoidAsync("Radzen.wrapSelectedImageWithLink", attributes.Href, blank);
            }
            else
            {
                var html = new StringBuilder();
                html.AppendFormat("<a href=\"{0}\"", attributes.Href);
                if (blank)
                {
                    html.Append(" target=\"_blank\"");
                }

                html.AppendFormat(">{0}</a>", string.IsNullOrEmpty(attributes.InnerText) ? attributes.InnerHtml : attributes.InnerText);

                await Editor.ExecuteCommandAsync("insertHTML", html.ToString());
            }
        }
    }
}